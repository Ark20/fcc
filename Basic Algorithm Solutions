Basic Algorithms 

//reverse a string 

function reverseString(str){
//seperate string into array, reverse array and join array back into string 
str.split("").reverse().join("");
};

//factorialize

function factorialize(num){
if(num===0)
{return 1;}// ending point of recursion
return num * factorialize(num-1); //mulitply the number by all numbers less than it

};

//palindrome check 


function palindrome(str) {
//see if string is equal reversed with whitespace removed
  return str.replace(/[\W_]/g, "").toLowerCase() === str.replace(/[\W_]/g, "").toLowerCase().split("").reverse().join("");
}

//find longest word in a string 

function findLongestWord(str) {
  var holder = str.split(" ");
  // split string into an array so words can be compared 
  var longest=""; 
  // keep track of the longest and go through entire holder array 
  for(var i=0; i<holder.length; i++)
    {
    //if holder element is larger than longest it becomes the new longest
      if(holder[i].length>longest.length)
        {
          longest = holder[i];
        }
      
    }
  
  return longest.length;
//return length of longest 
}


//title case

function titleCase(str) {
  return str.toLowerCase().split(" ").map(function(word){ return word.replace(word[0],word[0].toUpperCase());}).join(" ");
}
//map to iterate over every array element replace them with cap version 
titleCase("I'm a little tea pot");

//largest of four

function largestOfFour(arr) {
var results=[];

for(var a = 0; a < arr.length ; a++){
//iterate through array   
var largest = 0; 
 /iterate through sub arrays  
for(var b = 0 ; b < arr[a].length; b++)
  {
   if(arr[a][b]>largest)
    {
      largest = arr[a][b];
    }
   //find largest number 
  }
  results[a] = largest; 
  //add largest numbers to array 
}  
  
  return results; 

}


//confirm end of string 

function confirmEnding(str, target) {
return target===str.substr(str.length-target.length, str.length);
}
//if target = the substring at the end of string then return true 

//repeat a string 
function repeat(str,num){
for(var i = 0; i < num; i++)
{holder+=str}
return holder 
};

//return true if all letters in first string are in second 
function mutation(arr) {
 var word1 = arr[0].toLowerCase();
 var word2 = arr[1].toLowerCase();
 //make both lowercase for comparison 
 for(var i = 0; i < word2.length;i++) {
   /**length of 2nd word is important because we are iterating through its letters **/
  var value= word1.indexOf(word2[i]);
   if(value===-1){
     return false;
     //negatuve one iss result when it isnt in word one 
   }
}  
 return true;
}

new Boolean([value]);




function bouncer(arr) {
  // Don't show a false ID to this bouncer.
  function notFalsy(bar)
  {
  return (Boolean(bar) === true);
  // only return values that are true / real numbers letters 
  }
  
return arr.filter(notFalsy);  
}

or 

function bouncer(arr){
function falsy(arr){
return Boolean(arr);
}
//return only values that evaluate to true 
return arr.filter(falsy);
};



function chunkArrayInGroups(arr, size) {
  // Break it up.
  var holder=[];//new array
  var count=0; //place in array 
  while(count<arr.length){//iterate through whole array 
    holder.push(arr.slice(count,count+size));//push slice of array starting at begining into 
    count=count+size; //set place in array to start slice 
  
  }
  return holder;
}

chunkArrayInGroups(["a", "b", "c", "d"], 2);



function slasher(arr, howMany) {
  // it doesn't always pay to be first
  
  return arr.slice(howMany);//slice starting at how many you want to cut off and ending at the end of the array 
}

slasher([1, 2, 3], 2);
